name: Production CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 3 * * 1' # Weekly security scan
  workflow_dispatch:

env:
  NODE_VERSION: 20
  PNPM_VERSION: latest

jobs:
  # Security and dependency checks
  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    environment: testing
    env:
      NEXT_PUBLIC_ENV: ${{ vars.NEXT_PUBLIC_ENV }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

        # Temporarily disabled due to debug package false positive
        # pnpm audit --audit-level high
      # - name: Audit dependencies
      #   run: pnpm audit --audit-level high

      - name: Check for outdated dependencies
        run: pnpm outdated --format table | grep -v "next"

  # Linting and code quality
  lint:
    name: Lint
    runs-on: ubuntu-latest
    environment: testing
    env:
      NEXT_PUBLIC_ENV: ${{ vars.NEXT_PUBLIC_ENV }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    environment: testing
    env:
      NEXT_PUBLIC_ENV: ${{ vars.NEXT_PUBLIC_ENV }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: .test-results/
          retention-days: 30
          if-no-files-found: ignore

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    environment: testing
    env:
      NEXT_PUBLIC_ENV: ${{ vars.NEXT_PUBLIC_ENV }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      DATABASE_TEST_URL: ${{ secrets.DATABASE_TEST_URL }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
    needs: [security, lint, test]
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=build-${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            .next/
            node_modules/
          key: ${{ steps.cache-key.outputs.key }}

      - name: Build application
        run: pnpm run build

  # Updated e2e job
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    environment: testing
    env:
      NEXT_PUBLIC_ENV: ${{ vars.NEXT_PUBLIC_ENV }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      DATABASE_TEST_URL: ${{ secrets.DATABASE_TEST_URL }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
    needs: [build]
    # strategy:
    #   matrix:
    #     browser: [chrome, firefox, edge]
    #   fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            .next/
            node_modules/
          key: ${{ needs.build.outputs.cache-key }}

      - name: Install remaining dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm add -D cypress start-server-and-test
          npx cypress install

      - name: Run E2E tests
        run: |
          pnpm exec start-server-and-test "pnpm start -p 3001" http://localhost:3001 "cypress run"

      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results
          path: |
            cypress/screenshots/
            cypress/videos/
            .test-results/cypress/
          retention-days: 30

  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    environment: testing
    needs: [security, lint, test, build, e2e]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: All checks passed
        run: |
          echo "ðŸŽ‰ All quality checks passed!"
          echo "Vercel will automatically deploy this commit to production."
          echo "Check your Vercel dashboard for deployment status."

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-results*'
          path: .test-results
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded test artifacts:"
          find .test-results -type f -name "*.xml" -o -name "*.json" | head -20

      - name: Create test summary
        if: always()
        run: |
          echo "## ðŸ“Š Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit/Integration | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
